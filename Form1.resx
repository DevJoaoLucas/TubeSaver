<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAB1FwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFv
        ck5UAc+id5oAABcvSURBVHja7Z19bJVVnseLIkSRlLAEQzauieGP0YzEMLOZ5Y/xD0My2mFAgRmVGXdQ
        2InZwA7JMoCKZgM7ApndneyuCNIFRReWXQXBYa1MoS3QusOLvLS+0DLaWuyLAi2lr9y+nP2dy4/Ow/WW
        9t7e5z5vnzP5BEeQ3nvO+X6e85znnPPk5FB8V/L2vzIYo4RcYZJwjzBdmC8sE9YIG4Qdwj7hiHBGqBbq
        hPNCi9Ah9Cgd+u/O65+p1v/miP4dO/TvfEl/xnz9md/Sz5Crn+mGn5tCoaQW9pHCOOEu4QHhKWG1sEUo
        EE4J54QLQpvQLRiX6dafdUF/9in9LFv0s9nP+H39zLn6HZAChTKEwI8V7hZmCMuFfKFYr8jNQiwLAR8u
        Mf2s1frZ8/W7zNDvNhYhUAj9VezV/T5hnrBOr6Q2OK0BCHqqtOp3K9DvOk+/+zhkQIlK6Efr0HiW3quX
        CA1CVwgDPxhd+t1LtC5mad2MRgaUMIX+dmGqsFjYLlQK7REM/GC0a91s17qaqnWHDCiBC/0Y4X5hibBX
        aBR6CfmQ6dU626t1eL/WKTKg+Db4twj36tVrj1BP6DMmg3qt08Vax7cgAopfrvYThJnCZqGG0Lsugxqt
        65la94wKKJ5c7acIK4QyfS5OQLNLm9b9Cm0LRgUU14Nv70Mf1GfbtUIfQfScPm2LfG2bMYiAkungjxfm
        CjuFJkLnW5q0jeZqmyECyrCCf4ewUFe08eguWI8Ui7Xt7kAElFSDbyeXnhZKA7L8FgZellyqbTkBEVCG
        MtR/UlendRGgUK06LNG25daA4H8j+LcJc4RCoZPAhJZObeM52uaIIOLhv1mYJmwTLhOQyHBZ23ya9gEk
        EMGr/mRhrR6AQSiiSZ32gcmMBqITfntIxTNCBQEApUL7RC4SCG/wR+iQbxcTfDDAROEu7SMjEEG4wj9R
        eFZXjNHZ4UbUal+ZiASCH/yb9PDKwiydlwfhoFv7zHTtQ4gggOG3z3uf133ldGpIh0btQ+ORQLBm+L8j
        7OaqDxkaDezWPsWTAp+H/1ZhgVBFx4UMU6V961Yk4M/w3ym8wt58cPkMgle0ryEBH4X/e8J+Oihkif3a
        55CAx8G3b515XE+TpWNCNqnUvjcSEXi3ou9FDugAjw8geZEVhN7c729lrz745MyBrcwLZC/839bXS9H5
        wE8UaN9EAi6G374h9xidDXzKMe2jSCDD4bfLMWcLZ+lk4HPOal+9CQlkJvwjdQEGS3ohSEuIFzifEFDS
        C7992cMiZvohoE8IFjlfWEJJLfz2NdFLhRY6EwSUFu3Do5FAauG3661XsqwXQrJ8eKVzDwFl8PCvEjro
        PBASOrRPI4EhDPtXEn4IqQRWcjtw4wm/pQz7IeS3A0uZGEz+qG8RE34QkYnBRZF/RJiwyGcBj/ogYo8I
        F0R2sVDC8t7ZLPKBiC4Wmh25ZcNJ1vazvBeivGw4OnsHkuzqY2MPsIEoKrsIE/bzs6UX4E9bie8MtQAc
        4R+nByjQ8AB/YqtmI3wSSHjc9yIn+QAkPVnoxdA9Hky473+Cx30AN3w8+ERo5gMSwv9XebywA2AwqjQr
        wZeA40v8hVBE4/qHhx1QH76jSDMTXAE4wn+bsJFG9T7wDxWuj/OjAxvNo8WbzNyS/4j/OuPABvMD/T2E
        4Bs2anaCJ4GEof9CoZ0G9Tb4c4rzza+Ov2M2VZWZ9+s+Nh98/bn58GKtKZNf3/vyY/NqZan5+2O74n8O
        EfiCds1O8G4FHB/6u6z08zD8EuRHizaZl8r3mSPna8zlWKcZqPTJ/1rk9/9wvtr8uvz9+MjAioB69Hyl
        4HcDJQBH+P9M2EMjehf++aVvmv/98iPT0RMzqRT75wtkVPBU2X/G/x7q01P2aJb8LwFH+G8Wns+7+m51
        GjHrw/6r4T8qV/3hlBNyi7AACXhNt2bpZt9LwCGA6ezw8+6e307uFTdWmUyUsq8+M48d3BKXCvXr6c7B
        6b4WgCP8E4VCGs27q/9vPykyV3p7MiKAnr5es7HyMHXrPYWaLf9JwBH+EcKzDP29C/8TB18zn15qNJks
        1a0Xzc9L32AU4P2twLOaMX9JwCGAaUItjeUNdtZ+5cnfmY7uWEYFEJPRxLqK38fXClDPnlKrGfOPABzh
        zxV20UjeCmDb58eMG2XvuYr4giHq2XN2ada8l0DCgp9nhC4ayDvsCr99dZ+4IoCj57+ILxJigZDndGnW
        vF8g5PgQk4UKGsfb2f/ZxZviK/zcKGdaGnka4B8qNHPeCSDhmf9aGsUfj/9OXDznigBq25rMTw+9jgD8
        w1pP1wYkTPzV0SD+EMBJlwRwrr0ZAfiLOs8mBBN2+m2jMaIgAEYAPmSbJzsGHQKYI1ymIRAAeMJlzWD2
        BOAI/3hW/CEA8MUKwfFZk4BDAE8KnTQAAgBP6dQsui8AR/gnCCVUPgIAX1CimXRXAg4BPM2iHwQAvloc
        9LSrAnCE/w6hlEpHAOArSjWb7kgg4Yw/XuyBAMBfxJxnCLo5819MZSMA8CXFrjwRcAhgbh4n/CIA6tuv
        tGtGMycAR/jHCDupZARAffuanZrVzEjAIYAH83ivHwJAAH6nSbOaUQHcIuRTuQgAAQSCfM1sxq7+Uzjq
        CwEggEAdHTZl2KMAhwBWCH1ULAJAAIGgTzObvgASlv2WUakIAAEEirJhLQ92CGCm0EaFIgAEECjaNLvD
        EoCdSNhMZSIABBBINqc1Gei4+t8r1FCRCAABBJIazXBqowCHABYLvVQkAkAAgaRXM5yWAOxqIl7vjQAQ
        QLDZc21lYKpX//uFeioQASCAQFOvWR7aKMAhgCUM/xEAAgjFbcCSVAVwu7CXykMACCAU7NVMD/nqP1Vo
        pOIQAAIIBY2a6RuPApj9RwAIIMJPA/QPjBa2U2kIAAGEiu2a7UGv/ncJlVQYAkAAoaJSs518FOAQwKw8
        jv1CAAggjMeFzRqKANZQWQgAAYSSNYMJYFweb/xBAAggrJRoxge8+t8nNFBRCAABhJIGzfj1owCHAObl
        8covBIAAwkqXZnxAAayjkhAAAgg16wYSwFihgApyN6Q2QG7wUOF6M6c435xwUQDzDr0W/zlufYer0E9c
        pkCz/g0B3C1UU0FuBH+9+aH8+mO5QtsQucETwsIPtpmK5npXBFDXccn87R92xH/OPBf5ccnmeF0x0nCN
        as36N4b/M4RWKijz4X/y8Fbz5mdHzemmL01N60VT0+YOtW1NprMn5ooAYr09Mgpodu2zx5G6KW+qi9fV
        zw5zu+ESrZr1q7cBDgEsp3IyP+S3V/2DjWcNJbVS0lBlfnJwM7cE7rA8UQAj83jzT8ax98tryveZK73d
        JDqNEcdvPiqM1yF9KePka+avWwBUTMVknt21p0lzmuWdL07Rh9yhuH9BkGMDEBOALrBLOjElvfJ2zUn6
        kHsTgXc5BfCA0EzFZP4W4B9OvWfau6+Q5hSLrTNbd9wCuEKzZr5fAE8JMSom8zxS9Gr8StbT10uqh1hs
        Xdk6e6RoE5OA7hDTzPcLYDWV4t5jQPsk4N1z5UhgiOG3dWXrjMeArrL6mgBGCVuoEBclUIgEUg4/Q3+3
        sZkfZQWQyxJgJED4I7kkONcKYJJwigpBAoQ/UtjMT7ICuEc4R4UgAcIfKWzm77ECmC5coEKQAOGPFDbz
        060A5gttVAgSIPyRwmZ+vhXAMqGbCkEChD9S2Mwv4xRgJED4I3xKsBXABioCCRD+SLLBCmAHFYEECH8k
        2WEFsI+KQAKEP5LsswI4QkUgAcIfSY5YAZyhIpAA4Y8kZ3I4CAQJEP7oHgxiBVBHRSABwh9J6qwAzlMR
        SIDwR5LzVgAtVAQSyFz4Kwh/cGixAuigIpBA5sK/mfAHhw4rgB4qAgkQ/kjSgwCQAOGPuAC4BUAChD/C
        twBMAiIBwh/hSUAeAyKBlMP/O8IfmseALARCAoQ/wguBWAqMBAh/hJcCsxkICRD+CG8GYjswEiD8Ed4O
        zIEgSIDwR/hAEI4EQwKEP8JHgnEoKBIg/NFkA8eCIwHCH13W8GIQJED4o0n/i0F4NRgSIPzRo//VYLwc
        FAkQ/ujR/3LQyL4e/GElahLYUX3cNF/p6A//Jfnn/67+MNLhfzh6/aH/9eCThFNRaeiHpIP/oPBl88P9
        G8yc4vx4IGYWbYz/e8vDoe/o683MAxvNr46/Y/KryuIsO747Xgf296IVetsX1sd/faTo1bgAHy3eFO8D
        to+EvD5s5idZAeQKBVEwvP31Fx9sNxvOHIoPd4+crzGnmr40++vPmDc/O2qeO/Hu1Q4QgavgNRFaHorg
        Vd9+58cObjEvle8zb9WcMAcbz5rypjpT9tVnZmfNSfObj/abnx1+PcwSsJnPtQIYJWwJu+ltsDecOWzq
        2i+ZvgEmwVq7u+IysJKI2tUwaiyTEdCHF2vNld7upH2hu7fXfHqp0aw6XWBmHNgQxjqwmR9lBWBZHeYr
        /ywZ3m3//Jg0ds+QnoN/1FxvfvF//8VkWEgvBnakZy8EQymXYh3mn2Q0EMK6sJnPuSaAp4RYWId6vy5/
        37R3X0lpJVxRQ5WZXZwfqUnCKIT/rw+/Eb+yp1IaO1rM3x15K0y3SjHNfL8AHhCaw3j1txN9xy58kfJS
        WCuMF07ujeT9cZjv+9efOWR6+/pS7g97asvDdCvQrJnvF8BdYTwYxDb4oiP/Y5qutKe1GebtmpMEJ0QX
        g0eKNpnDX/0xrb5Q03oxTJOC1Zr5fgGME4rDKIBVp98znT2xtBq97OvP+h8LEaLgD/8fP7jFVLV8nVZf
        uBTrjF9MQjIiLNbM9wtgpJAftka3j7j++eMDpnuIk3+J5XTTl1dfc0WAQiEAewWv67iUVl9ok1vCFR/u
        CYsA8jXz/QKwLA+jAH77cZHpTnNPfEVzvfmJXR3HI8GQCGCraehoSasv2Dmh50+8GxYBLL+We6cAZgit
        CMApgDoEgADCJoBWzfpVAdii/+fusE0EIgBAAEknAO/uD79DAGPDtiQYAQACSLoEeGwyAVjWIQAEgABC
        LYB11w3/EwQwT+hCAAgAAYRSAF2a8QEFcJ/QgAAQAAIIpQAaNOPXC8AhAbs4oAQBIAAEEEoBlPQvAEos
        jlHAGgSAABBAKAWwJunVP0EAs4R2BIAAEECoBNCu2R5UAHaTQCUCQAAIIFQCqLy2ASipABwSGC1sRwAI
        AAGESgDbNds5AxbHKGCx0IsAEAACCIUAejXTOUMVwFShEQEgAAQQCgE0aqZvLACHBG4X9iIABIAAQiGA
        vZrpnEGLYxSwJOi3AQgAEEA8w0uGdPVPEMD9Qj0CQAAIINACqNcsD00ADgmMEfYgAASAAAItgD2a5Zwh
        l7A8DUAAEHEBDG32/wYCuFeoQQAIAAEEUgA1muHUBOCQwC3C5igLwB4Keu2loRBcbBvaQ0EjJoDNmuGc
        lItjFDBTaIuiAD6+1GB+XvpG/OUic0UEEFzsW57+5oPtprHzclQE0KbZzRmuACYIZVEUQGusy5xqOmeO
        X/hCqIVA80X87b9dPd1REUCZZjc9ASRIYIXQFzUBUCgBFUCfZjb98CcIYIpQiwAoCCAQAqjVzA5PAAmT
        gfkIgIIAAiGA/LQn/24wCnhQaEIAFATg637fpFnNybQA7GqinQiAggB83e93Xlv5lxEBJEhgbpCOC0MA
        lIgJoF0zmrnwJwhgfF6AXiNuBfAv8bcDIwDK8Ip9O/Bz/hdAsWY0swJIkMBCIRYEAdjG+sfy99N+9kuh
        XCuXY51mydG3/SyAmGYz8+FPEMAdQmlQBPDLo2+ZFmk8CmU4xa4gnF/6pnnYvwIo1Wy6I4AECTydF4BX
        iNk14HYt/8mL5+jBlGGVQ1/90TxStCnep3zY17s0k+6FP8ny4JKgjAJWnS6I38NRKOlOAK6WPuTj4X/J
        sJf9piGBJ4XOIIwCZhW9at6tLacnU1IuPX295q2ak/E+5NOrf6dm0f3wJ3kiUBiUveA/PfS6OdBQGW9Q
        CmUo5dKVDrPt82Px3YQ+PhOi0LWZ/yFIYI5wOSgSsId7bKwsNZUtX5nW7i4T6+0RIfSZXgDBXhyuSJ+w
        k8ZHztfEH/v96MBGP4f/smYwe+FPEMBtwrYgnQpjf33i0Gtm2fHdZl1Fofm3T0vMvwMI//pJsVlT8Xvz
        y6Nvmzkl+UFY9bdNM5hdASRIYJpQF7TjoWzj2oVCAIlcOwHK5/24TrOX/fAnCOBmYS3nzgFklbWaPW8E
        kCCByUIFjQKQFSo0c96FP0EAlmeCsDgIIOB0adZyPBdAggRyhV00EICr7NKseR/+ASYEa2kkANeO+prm
        q/AnCGCE8KzQTWMBZJRuzdYI3wkgQQITg7JCECBAFGq2/Bf+JBKYLjTSaAAZoVEz5d/wJwjgJuF5bgUA
        MjL0f14z5W8BJNkstJsGBBgWu7O+2SeDEviOUEUjAqRFlWYoOOFPskBoQVBfLgrgIW2anZzACSBBArcK
        r9CgACnximYneOFPIoE7hf00KsCQ2K+ZCW74k9wKfE+opHEBbkilZiUn8AJIIoHH8wL2fkGALNKkGQlH
        +JNIYKTwYl5AXiwCkEVimo2RoQr/ALsGt9LgANex1Xe7/FyeFCyg0QHiFIRi0i/F+YBvC8dofIg4xzQL
        OaEXQBIJPCCcpRNARDmrGYhG+AeQwGx2DkJEd/jNjlz4B9g5uIDHgxCxx30LArPDL0uPBxcJLXQOCDkt
        2tdHRjr8SSRwi7CUjUMQ8g0+S7WvE/4kEhgtrBQ66CwQMjq0b48m/IPvHlyFBCBk4V8V+N19WZbASm4H
        ICTD/pWEP73bgaVMDELAJ/yWMuwf3sTgIh4RQkAf9S1iwi8zjwgXsFgIArbIZwGP+jK7WGg2y4YhIMt7
        Z0d+kY+LewfYQAR+3tgTvbX9HuwiZCsx+HFL77cJf3YkcKceoMDJQuCHk3y2OvfzE/7sSMCenvICTwjA
        45n+F5wn+RD+7ErAzrI+JpyhM0KWOaN9byTh914Ef5nHK8khexRqnyP4PpLAnwsvs3wYXF7W+7L2NcLv
        QwnY9dbz83gBCWSeSu1btxJ+f0vAMlV4J+/qu9XpvDAcurUvTU3sZxR/i8C+U/05lhDDMJf0Pqd9ieAH
        UAJ2OeZ0nbRhNACpXPULte/cRPiDL4KJwrNCLZ0bBqFW+8pEgh8uCYwQpgm7hC46OiTQpX1jmvYVwh/i
        FYTPCBV0elAqtE+woi9CTwomC2uFOgIQWeq0D0xmhj+aIrhZh3zbhMsEIjJc1jafpn2A4Ed8NHCbMEdn
        fjsJSGjp1Daeo23OVR8RfGPtwJNCCROFoZvgK9G2HU/wKYOJYILwtFDKmQOB36tfqm05geBTUhXBHcJC
        oVhoJ1CBoV3bbKG2IcGnDPvWYK6wkwNIfH9Ax05tK4b6lIyLYIzwoJCvK8b6CJ3n9Glb5GvbjCH4FLdF
        YF/2MEVYIZRxBoFne/PLtA2mOF/AQfAp2RLBtQnDmcJmoUboJZyu0at1vFnrfEKyNqFQvBoV3CssFvYI
        9cggY6Gv1zpdrHXM1Z7i61GBvQ+9X1gi7NV95cggtdA3at0t0bocw9WeEkQZ3K6nydir13Y9WopHiskf
        3VVqHS3WOrud0FPCJAP7mui7hFnCGl2d1hDRVYdd+t1LtC5mad2MJvSUKMjAMk64T5gnrNPXS1ULrSEM
        fKt+twL9rvP0u48bqH4olCjJwDJWuFuYISzXZ9vFGpzmgCxLjulnrdbPnq/fZYZ+t7E3qgMKBSFc/+aj
        cTo0tm+dfUpYLWzRK+kp4ZxwQZ+LZ+Pcw279WRf0Z5/Sz7JFP5v9jN/Xz5yb+OYcAk+hDE8KllEarknC
        PXp4pT2zfpneT28Qdgj7hCP6GqtqPQDjvNAidAg9Sof+u/P6Z6r1vzmif8cO/Ttf0p8xX3/mt/Qz5Opn
        yiHswSr/D7478nTFcDriAAAAAElFTkSuQmCC
</value>
  </data>
</root>